#version 330
// implement a falsecolor fragment shader for grayscale images
// assume the single channel to be the r channel
// written with inspiration from MÃ¼ller's implementation of a visualizer in his PPG implementation (https://github.com/Tom94/practical-path-guiding.git)

// we don't need the background color as we assume the color from the image to always have alpha 1
in vec2 uv;
out vec4 frag_color;
uniform sampler2D image;
uniform float exposure;


float saturate(in float x){
return clamp(x,0.0,1.0);
}

// use turbo colormap from https://gist.github.com/mikhailov-work/0d177465a8151eb6ede1768d51d476c7
vec3 TurboColormap(in float x) {
// Copyright 2019 Google LLC.
// SPDX-License-Identifier: Apache-2.0

// Polynomial approximation in GLSL for the Turbo colormap
// Original LUT: https://gist.github.com/mikhailov-work/ee72ba4191942acecc03fe6da94fc73f

// Authors:
//   Colormap Design: Anton Mikhailov (mikhailov@google.com)
//   GLSL Approximation: Ruofei Du (ruofei@google.com)
  const vec4 kRedVec4 = vec4(0.13572138, 4.61539260, -42.66032258, 132.13108234);
  const vec4 kGreenVec4 = vec4(0.09140261, 2.19418839, 4.84296658, -14.18503333);
  const vec4 kBlueVec4 = vec4(0.10667330, 12.64194608, -60.58204836, 110.36276771);
  const vec2 kRedVec2 = vec2(-152.94239396, 59.28637943);
  const vec2 kGreenVec2 = vec2(4.27729857, 2.82956604);
  const vec2 kBlueVec2 = vec2(-89.90310912, 27.34824973);

  x = saturate(x);
  vec4 v4 = vec4( 1.0, x, x * x, x * x * x);
  vec2 v2 = v4.zw * v4.z;
  return vec3(
    dot(v4, kRedVec4)   + dot(v2, kRedVec2),
    dot(v4, kGreenVec4) + dot(v2, kGreenVec2),
    dot(v4, kBlueVec4)  + dot(v2, kBlueVec2)
  );
}

/// version for turbo color scheme
//void main() {
//    vec4 value = texture(image, uv);
//    float grayScale = pow(2.0, exposure)*value.r;
//    //float grayScale = pow(2.0, exposure)*value.r;
//    frag_color=vec4(TurboColormap(grayScale),1.0);
//}

/// Shader version from original PPG code. For comparability of representation
vec3 getColour(float v) {
            vec3 c = vec3(1.0);
            v = clamp(v, 0.0, 1.0);

            if (v < 0.25) {
                c.r = 0.0;
                c.g = 4.0 * v;
            } else if (v < 0.5) {
                c.r = 0.0;
                c.b = 1.0 + 4.0 * (0.25 - v);
            } else if (v < 0.75) {
                c.r = 4.0 * (v - 0.5);
                c.b = 0.0;
            } else {
                c.g = 1.0 + 4.0 * (0.75 - v);
                c.b = 0.0;
            }

            return c;
        }

        void main() {
            float grayScale = pow(pow(2.0, exposure) * texture(image, uv).r, 1.0 / 2.2);
            frag_color = vec4(getColour(grayScale), 1.0);
        }